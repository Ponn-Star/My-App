{
    "sourceFile": "backend/routes/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1749164706346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1749164706345,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react'\r\nimport { useParams, useNavigate } from 'react-router-dom'\r\nimport { facilityIcons, Introduction, assets } from '../assets/assets'\r\nimport StarRating from '../components/StarRating'\r\nimport { useAppContext } from '../conext/AppContext'\r\nimport toast from 'react-hot-toast'\r\n\r\nconst RoomDetails = () => {\r\n    const { id } = useParams()\r\n    const navigate = useNavigate();\r\n    const { rooms, axios, getToken, user } = useAppContext();\r\n    const [room, setRoom] = useState(null)\r\n    const [mainImage, setMainImage] = useState(null)\r\n    const [checkInDate, setCheckInDate] = useState('');\r\n    const [checkOutDate, setCheckOutDate] = useState('');\r\n    const [guests, setGuests] = useState(1);\r\n    const [canBook, setCanBook] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Ưu tiên lấy từ context\r\n        let foundRoom = rooms.find(r => String(r._id) === String(id));\r\n        if (foundRoom) {\r\n            setRoom(foundRoom);\r\n            setMainImage(foundRoom.images[0]);\r\n        } else {\r\n            // Nếu chưa có, fetch từ API\r\n            const fetchRoom = async () => {\r\n                try {\r\n                    const { data } = await axios.get(`/api/rooms`, {\r\n                        headers: { Authorization: `Bearer ${await getToken()}` }\r\n                    });\r\n                    if (data.success) {\r\n                        const found = data.rooms.find(r => String(r._id) === String(id));\r\n                        if (found) {\r\n                            setRoom(found);\r\n                            setMainImage(found.images[0]);\r\n                        } else {\r\n                            toast.error(\"Không tìm thấy phòng\");\r\n                        }\r\n                    } else {\r\n                        toast.error(data.message);\r\n                    }\r\n                } catch (error) {\r\n                    toast.error(error.message);\r\n                }\r\n            };\r\n            fetchRoom();\r\n        }\r\n    }, [id, rooms, axios, getToken]);\r\n\r\n    const handleCheckAvailability = async (e) => {\r\n        e.preventDefault();\r\n        if (!checkInDate || !checkOutDate || !room) return;\r\n        try {\r\n            const { data } = await axios.post('/api/bookings/check-availability', {\r\n                room: room._id,\r\n                checkInDate,\r\n                checkOutDate\r\n            }, {\r\n                headers: { Authorization: `Bearer ${await getToken()}` }\r\n            });\r\n            if (data.success && data.isAvailable) {\r\n                toast.success(\"Phòng còn trống! Bạn có thể đặt phòng ngay.\");\r\n                setCanBook(true);\r\n            } else {\r\n                toast.error(\"Phòng đã được đặt hết trong thời gian này!\");\r\n                setCanBook(false);\r\n            }\r\n        } catch {\r\n            toast.error(\"Lỗi kiểm tra phòng trống\");\r\n            setCanBook(false);\r\n        }\r\n    };\r\n\r\n    const handleBookNow = async (e) => {\r\n        e.preventDefault();\r\n        if (!user) {\r\n            toast.error(\"Bạn cần đăng nhập để đặt phòng!\");\r\n            return;\r\n        }\r\n        if (!checkInDate || !checkOutDate || !room) return;\r\n        try {\r\n            const { data } = await axios.post('/api/bookings/book', {\r\n                room: room._id,\r\n                checkInDate,\r\n                checkOutDate,\r\n                soKhach: guests,\r\n                phuongThucThanhToan: \"ThanhToanTaiCho\"\r\n            }, {\r\n                headers: { Authorization: `Bearer ${await getToken()}` }\r\n            });\r\n            if (data.success) {\r\n                toast.success(\"Đặt phòng thành công!\");\r\n                setCanBook(false);\r\n                setTimeout(() => {\r\n                    navigate('/my-bookings');\r\n                }, 500); // Thêm delay nhỏ để toast hiển thị trước khi chuyển trang\r\n            } else {\r\n                toast.error(data.message);\r\n            }\r\n        } catch {\r\n            toast.error(\"Lỗi đặt phòng\");\r\n        }\r\n    };\r\n\r\n    if (!room) return <div className=\"text-center py-20 text-gray-400\">Đang tải thông tin phòng...</div>;\r\n\r\n    return (\r\n        <div className='py-28 md:py-35 px-4 md:px-16 lg:px-24 xl:px-32'>\r\n            <div className='flex flex-col md:flex-row items-start md:items-center gap-2'>\r\n                <h1 className='text-3xl md:text-4xl font-playfair'>\r\n                    {room.roomType}\r\n                </h1>\r\n                <p className='text-xs font-inter py-1.5 px-3 text-white bg-orange-500 rounded-full'>20% OFF</p>\r\n            </div>\r\n            <div className='flex items-center gap-1 mt-2'>\r\n                <StarRating />\r\n                <p className='ml-2'>200+ reviews</p>\r\n            </div>\r\n            <div className='flex flex-col lg:flex-row mt-6 gap-6'>\r\n                <div className='lg:w-1/2 w-full'>\r\n                    <img src={assets[mainImage] || mainImage} alt=\"Room Image\" className='w-full rounded-xl shadow-lg object-cover' />\r\n                </div>\r\n                <div className='grid grid-cols-2 gap-4 lg:w-1/2 w-full'>\r\n                    {room?.images.length > 1 && room.images.map((img, idx) => (\r\n                        <img key={idx} src={assets[img] || img} alt='Room Image' className={`w-full rounded-xl shadow-md object-cover cursor-pointer ${mainImage === img && 'outline-3 outline-orange-500'}`} onClick={() => setMainImage(img)} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <div className='flex flex-col md:flex-row md:justify-between mt-10'>\r\n                <div className='flex flex-col'>\r\n                    <h1 className='text-3xl md:text-4xl font-playfair'>Luxury Glamping</h1>\r\n                    <div className='flex items-center gap-3 mb-6 mt-4'>\r\n                        {room.amenities.map((item, index) => (\r\n                            <div key={index} className='flex items-center gap-2 px-3 py-2 rounded-lg bg-gray-100'>\r\n                                <img src={facilityIcons[item]} alt={item} className='w-5 h-5' />\r\n                                <p className='text-xs'>{item}</p>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <p className='text-2xl font-medium'>{room.pricePerNight}.000 VND/night</p>\r\n            </div>\r\n            <form\r\n                className='flex flex-col md:flex-row items-start md:items-center justify-between bg-white shadow-[0px_0px_20px_rgba(0,0,0,0.15)] p-6 rounded-xl mx-auto mt-16 max-w-6xl'\r\n                onSubmit={canBook ? handleBookNow : handleCheckAvailability}\r\n            >\r\n                <div className='flex flex-col flex-wrap md:flex-row items-start md:items-center gap-4 md:gap-10 text-gray-500'>\r\n                    <div className='flex flex-col'>\r\n                        <label htmlFor=\"checkInDate\" className='font-medium'>Check-In</label>\r\n                        <input type=\"date\" id=\"checkInDate\" value={checkInDate} onChange={e => setCheckInDate(e.target.value)} className='w-full rounded border border-gray-300 px-3 py-2 mt-1.5 outline-none' required />\r\n                    </div>\r\n                    <div className='w-px h-15 bg-gray-300/70 max-md:hidden'></div>\r\n                    <div className='flex flex-col'>\r\n                        <label htmlFor=\"checkOutDate\" className='font-medium'>Check-Out</label>\r\n                        <input type=\"date\" id=\"checkOutDate\" value={checkOutDate} onChange={e => setCheckOutDate(e.target.value)} className='w-full rounded border border-gray-300 px-3 py-2 mt-1.5 outline-none' required />\r\n                    </div>\r\n                    <div className='w-px h-15 bg-gray-300/70 max-md:hidden'></div>\r\n                    <div className='flex flex-col'>\r\n                        <label htmlFor=\"guests\" className='font-medium'>Guests</label>\r\n                        <input type=\"number\" id=\"guests\" value={guests} onChange={e => setGuests(e.target.value)} placeholder=\"0\" className='max-w-20 rounded border border-gray-300 px-3 py-2 mt-1.5 outline-none' required />\r\n                    </div>\r\n                </div>\r\n                <button\r\n                    type=\"submit\"\r\n                    className='bg-blue-500 hover:bg-blue-700 active:scale-95 transition-all text-white rounded-md max-md:w-full max-md:px-6 md:px-25 py-3 md:py-4 text-base cursor-pointer'\r\n                >\r\n                    {canBook ? \"Đặt phòng ngay\" : \"Kiểm tra phòng trống\"}\r\n                </button>\r\n            </form>\r\n            <div className='mt-25 space-y-4'>\r\n                {Introduction.map((spec, index) => (\r\n                    <div key={index} className='flex items-start gap-2'>\r\n                        <img src={spec.icon} alt={`${spec.title}-icon`} className='w-6.5' />\r\n                        <div>\r\n                            <p className='text-base'>{spec.title}</p>\r\n                            <p className='text-gray-500'>{spec.description}</p>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RoomDetails"
        }
    ]
}