{
    "sourceFile": "BackEnd/middleware/authMiddleware.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1749160856113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749162037128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n import User from \"../models/User.js\";\r\n \r\n // Middleware to check if user is authenticated\r\n export const protect = async (req, res, next) => {\r\n-    const { userId } = req.auth;\r\n+    // Clerk sẽ gán req.auth.userId nếu token hợp lệ\r\n+    const { userId } = req.auth || {};\r\n     if (!userId) {\r\n         return res.json({ success: false, message: \"not authenticated\" });\r\n     } \r\n     const user = await User.findById(userId);\r\n"
                },
                {
                    "date": 1749164961365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,26 @@\n     // Clerk sẽ gán req.auth.userId nếu token hợp lệ\r\n     const { userId } = req.auth || {};\r\n     if (!userId) {\r\n         return res.json({ success: false, message: \"not authenticated\" });\r\n-    } \r\n-    const user = await User.findById(userId);\r\n+    }\r\n+    // Tìm user theo idUser (không phải _id)\r\n+    let user = await User.findOne({ idUser: userId });\r\n     if (!user) {\r\n-        return res.json({ success: false, message: \"user not found\" });\r\n+        // Nếu chưa có user, tạo mới user từ thông tin Clerk (nếu có)\r\n+        // Bạn cần truyền thêm thông tin user từ frontend hoặc lấy từ Clerk API\r\n+        // Ví dụ: req.auth chứa email, tên, image (nếu cấu hình đúng)\r\n+        const { email, imageUrl, firstName } = req.auth || {};\r\n+        if (!email || !firstName || !imageUrl) {\r\n+            return res.json({ success: false, message: \"user not found and missing info to create\" });\r\n+        }\r\n+        user = await User.create({\r\n+            idUser: userId,\r\n+            Ten: firstName,\r\n+            email,\r\n+            image: imageUrl,\r\n+            role: \"User\"\r\n+        });\r\n     }\r\n     req.user = user;\r\n     next();\r\n }\r\n"
                },
                {
                    "date": 1749175214493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,36 @@\n import User from \"../models/User.js\";\r\n+import axios from \"axios\";\r\n \r\n // Middleware to check if user is authenticated\r\n export const protect = async (req, res, next) => {\r\n-    // Clerk sẽ gán req.auth.userId nếu token hợp lệ\r\n     const { userId } = req.auth || {};\r\n     if (!userId) {\r\n         return res.json({ success: false, message: \"not authenticated\" });\r\n     }\r\n-    // Tìm user theo idUser (không phải _id)\r\n     let user = await User.findOne({ idUser: userId });\r\n     if (!user) {\r\n-        // Nếu chưa có user, tạo mới user từ thông tin Clerk (nếu có)\r\n-        // Bạn cần truyền thêm thông tin user từ frontend hoặc lấy từ Clerk API\r\n-        // Ví dụ: req.auth chứa email, tên, image (nếu cấu hình đúng)\r\n-        const { email, imageUrl, firstName } = req.auth || {};\r\n-        if (!email || !firstName || !imageUrl) {\r\n-            return res.json({ success: false, message: \"user not found and missing info to create\" });\r\n+        // Lấy thông tin user từ Clerk API\r\n+        try {\r\n+            const clerkRes = await axios.get(\r\n+                `https://api.clerk.dev/v1/users/${userId}`,\r\n+                {\r\n+                    headers: {\r\n+                        Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`\r\n+                    }\r\n+                }\r\n+            );\r\n+            const clerkUser = clerkRes.data;\r\n+            user = await User.create({\r\n+                idUser: userId,\r\n+                Ten: clerkUser.first_name || \"NoName\",\r\n+                email: clerkUser.email_addresses?.[0]?.email_address || \"\",\r\n+                image: clerkUser.image_url || \"\",\r\n+                role: \"User\"\r\n+            });\r\n+        } catch (err) {\r\n+            return res.json({ success: false, message: \"user not found and cannot fetch from Clerk\" });\r\n         }\r\n-        user = await User.create({\r\n-            idUser: userId,\r\n-            Ten: firstName,\r\n-            email,\r\n-            image: imageUrl,\r\n-            role: \"User\"\r\n-        });\r\n     }\r\n     req.user = user;\r\n     next();\r\n }\r\n"
                },
                {
                    "date": 1749175708400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,15 +21,16 @@\n             );\r\n             const clerkUser = clerkRes.data;\r\n             user = await User.create({\r\n                 idUser: userId,\r\n-                Ten: clerkUser.first_name || \"NoName\",\r\n+                Ten: (clerkUser.first_name || \"\") + \" \" + (clerkUser.last_name || \"\"),\r\n                 email: clerkUser.email_addresses?.[0]?.email_address || \"\",\r\n                 image: clerkUser.image_url || \"\",\r\n                 role: \"User\"\r\n             });\r\n         } catch (err) {\r\n-            return res.json({ success: false, message: \"user not found and cannot fetch from Clerk\" });\r\n+            console.error(\"Error Clerk API:\", err?.response?.data || err.message || err);\r\n+            return res.json({ success: false, message: \"user not found and cannot fetch from Clerk\", error: err?.response?.data || err.message });\r\n         }\r\n     }\r\n     req.user = user;\r\n     next();\r\n"
                },
                {
                    "date": 1749176814935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n         return res.json({ success: false, message: \"not authenticated\" });\r\n     }\r\n     let user = await User.findOne({ idUser: userId });\r\n     if (!user) {\r\n-        // Lấy thông tin user từ Clerk API\r\n         try {\r\n             const clerkRes = await axios.get(\r\n                 `https://api.clerk.dev/v1/users/${userId}`,\r\n                 {\r\n@@ -19,14 +18,17 @@\n                     }\r\n                 }\r\n             );\r\n             const clerkUser = clerkRes.data;\r\n+            // Thay đổi email này thành email admin của bạn\r\n+            const ADMIN_EMAIL = \"your-admin-email@gmail.com\";\r\n+            const isAdmin = (clerkUser.email_addresses?.[0]?.email_address || \"\") === ADMIN_EMAIL;\r\n             user = await User.create({\r\n                 idUser: userId,\r\n                 Ten: (clerkUser.first_name || \"\") + \" \" + (clerkUser.last_name || \"\"),\r\n                 email: clerkUser.email_addresses?.[0]?.email_address || \"\",\r\n                 image: clerkUser.image_url || \"\",\r\n-                role: \"User\"\r\n+                role: isAdmin ? \"Admin\" : \"User\"\r\n             });\r\n         } catch (err) {\r\n             console.error(\"Error Clerk API:\", err?.response?.data || err.message || err);\r\n             return res.json({ success: false, message: \"user not found and cannot fetch from Clerk\", error: err?.response?.data || err.message });\r\n"
                },
                {
                    "date": 1749176828108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n                 }\r\n             );\r\n             const clerkUser = clerkRes.data;\r\n             // Thay đổi email này thành email admin của bạn\r\n-            const ADMIN_EMAIL = \"your-admin-email@gmail.com\";\r\n+            const ADMIN_EMAIL = \"an.ht.62cntt@ntu.edu.vn\";\r\n             const isAdmin = (clerkUser.email_addresses?.[0]?.email_address || \"\") === ADMIN_EMAIL;\r\n             user = await User.create({\r\n                 idUser: userId,\r\n                 Ten: (clerkUser.first_name || \"\") + \" \" + (clerkUser.last_name || \"\"),\r\n"
                },
                {
                    "date": 1749177835856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n     if (!userId) {\r\n         return res.json({ success: false, message: \"not authenticated\" });\r\n     }\r\n     let user = await User.findOne({ idUser: userId });\r\n+    // Lấy thông tin từ Clerk API để kiểm tra email\r\n+    let clerkUser;\r\n     if (!user) {\r\n         try {\r\n             const clerkRes = await axios.get(\r\n                 `https://api.clerk.dev/v1/users/${userId}`,\r\n@@ -17,10 +19,9 @@\n                         Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`\r\n                     }\r\n                 }\r\n             );\r\n-            const clerkUser = clerkRes.data;\r\n-            // Thay đổi email này thành email admin của bạn\r\n+            clerkUser = clerkRes.data;\r\n             const ADMIN_EMAIL = \"an.ht.62cntt@ntu.edu.vn\";\r\n             const isAdmin = (clerkUser.email_addresses?.[0]?.email_address || \"\") === ADMIN_EMAIL;\r\n             user = await User.create({\r\n                 idUser: userId,\r\n@@ -32,8 +33,30 @@\n         } catch (err) {\r\n             console.error(\"Error Clerk API:\", err?.response?.data || err.message || err);\r\n             return res.json({ success: false, message: \"user not found and cannot fetch from Clerk\", error: err?.response?.data || err.message });\r\n         }\r\n+    } else {\r\n+        // Nếu user đã tồn tại, kiểm tra và cập nhật role nếu cần\r\n+        try {\r\n+            const clerkRes = await axios.get(\r\n+                `https://api.clerk.dev/v1/users/${userId}`,\r\n+                {\r\n+                    headers: {\r\n+                        Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`\r\n+                    }\r\n+                }\r\n+            );\r\n+            clerkUser = clerkRes.data;\r\n+            const ADMIN_EMAIL = \"an.ht.62cntt@ntu.edu.vn\";\r\n+            const isAdmin = (clerkUser.email_addresses?.[0]?.email_address || \"\") === ADMIN_EMAIL;\r\n+            if (isAdmin && user.role !== \"Admin\") {\r\n+                user.role = \"Admin\";\r\n+                await user.save();\r\n+            }\r\n+        } catch (err) {\r\n+            console.error(\"Error Clerk API:\", err?.response?.data || err.message || err);\r\n+            return res.json({ success: false, message: \"user not found and cannot fetch from Clerk\", error: err?.response?.data || err.message });\r\n+        }\r\n     }\r\n     req.user = user;\r\n     next();\r\n }\r\n"
                },
                {
                    "date": 1749178844486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,10 @@\n     if (!userId) {\r\n         return res.json({ success: false, message: \"not authenticated\" });\r\n     }\r\n     let user = await User.findOne({ idUser: userId });\r\n-    // Lấy thông tin từ Clerk API để kiểm tra email\r\n-    let clerkUser;\r\n     if (!user) {\r\n+        // Lấy thông tin user từ Clerk API\r\n         try {\r\n             const clerkRes = await axios.get(\r\n                 `https://api.clerk.dev/v1/users/${userId}`,\r\n                 {\r\n@@ -19,44 +18,19 @@\n                         Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`\r\n                     }\r\n                 }\r\n             );\r\n-            clerkUser = clerkRes.data;\r\n-            const ADMIN_EMAIL = \"an.ht.62cntt@ntu.edu.vn\";\r\n-            const isAdmin = (clerkUser.email_addresses?.[0]?.email_address || \"\") === ADMIN_EMAIL;\r\n+            const clerkUser = clerkRes.data;\r\n             user = await User.create({\r\n                 idUser: userId,\r\n-                Ten: (clerkUser.first_name || \"\") + \" \" + (clerkUser.last_name || \"\"),\r\n+                Ten: clerkUser.first_name || \"NoName\",\r\n                 email: clerkUser.email_addresses?.[0]?.email_address || \"\",\r\n                 image: clerkUser.image_url || \"\",\r\n-                role: isAdmin ? \"Admin\" : \"User\"\r\n+                role: \"User\"\r\n             });\r\n         } catch (err) {\r\n-            console.error(\"Error Clerk API:\", err?.response?.data || err.message || err);\r\n-            return res.json({ success: false, message: \"user not found and cannot fetch from Clerk\", error: err?.response?.data || err.message });\r\n+            return res.json({ success: false, message: \"user not found and cannot fetch from Clerk\" });\r\n         }\r\n-    } else {\r\n-        // Nếu user đã tồn tại, kiểm tra và cập nhật role nếu cần\r\n-        try {\r\n-            const clerkRes = await axios.get(\r\n-                `https://api.clerk.dev/v1/users/${userId}`,\r\n-                {\r\n-                    headers: {\r\n-                        Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`\r\n-                    }\r\n-                }\r\n-            );\r\n-            clerkUser = clerkRes.data;\r\n-            const ADMIN_EMAIL = \"an.ht.62cntt@ntu.edu.vn\";\r\n-            const isAdmin = (clerkUser.email_addresses?.[0]?.email_address || \"\") === ADMIN_EMAIL;\r\n-            if (isAdmin && user.role !== \"Admin\") {\r\n-                user.role = \"Admin\";\r\n-                await user.save();\r\n-            }\r\n-        } catch (err) {\r\n-            console.error(\"Error Clerk API:\", err?.response?.data || err.message || err);\r\n-            return res.json({ success: false, message: \"user not found and cannot fetch from Clerk\", error: err?.response?.data || err.message });\r\n-        }\r\n     }\r\n     req.user = user;\r\n     next();\r\n }\r\n"
                },
                {
                    "date": 1749178902022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,30 +7,44 @@\n     if (!userId) {\r\n         return res.json({ success: false, message: \"not authenticated\" });\r\n     }\r\n     let user = await User.findOne({ idUser: userId });\r\n-    if (!user) {\r\n+    let clerkUser;\r\n+    try {\r\n         // Lấy thông tin user từ Clerk API\r\n-        try {\r\n-            const clerkRes = await axios.get(\r\n-                `https://api.clerk.dev/v1/users/${userId}`,\r\n-                {\r\n-                    headers: {\r\n-                        Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`\r\n-                    }\r\n+        const clerkRes = await axios.get(\r\n+            `https://api.clerk.dev/v1/users/${userId}`,\r\n+            {\r\n+                headers: {\r\n+                    Authorization: `Bearer ${process.env.CLERK_SECRET_KEY}`\r\n                 }\r\n-            );\r\n-            const clerkUser = clerkRes.data;\r\n+            }\r\n+        );\r\n+        clerkUser = clerkRes.data;\r\n+        const ADMIN_EMAIL = \"an.ht.62cntt@ntu.edu.vn\";\r\n+        const isAdmin = (clerkUser.email_addresses?.[0]?.email_address || \"\") === ADMIN_EMAIL;\r\n+\r\n+        if (!user) {\r\n+            // Nếu chưa có user, tạo mới\r\n             user = await User.create({\r\n                 idUser: userId,\r\n-                Ten: clerkUser.first_name || \"NoName\",\r\n+                Ten: (clerkUser.first_name || \"\") + \" \" + (clerkUser.last_name || \"\"),\r\n                 email: clerkUser.email_addresses?.[0]?.email_address || \"\",\r\n                 image: clerkUser.image_url || \"\",\r\n-                role: \"User\"\r\n+                role: isAdmin ? \"Admin\" : \"User\"\r\n             });\r\n-        } catch (err) {\r\n-            return res.json({ success: false, message: \"user not found and cannot fetch from Clerk\" });\r\n+            console.log(\"User created in MongoDB:\", user);\r\n+        } else {\r\n+            // Nếu đã có user, cập nhật role nếu cần\r\n+            if (isAdmin && user.role !== \"Admin\") {\r\n+                user.role = \"Admin\";\r\n+                await user.save();\r\n+                console.log(\"User role updated to Admin:\", user.email);\r\n+            }\r\n         }\r\n+    } catch (err) {\r\n+        console.error(\"Error Clerk API or MongoDB:\", err?.response?.data || err.message || err);\r\n+        return res.json({ success: false, message: \"user not found and cannot fetch from Clerk\", error: err?.response?.data || err.message });\r\n     }\r\n     req.user = user;\r\n     next();\r\n }\r\n"
                },
                {
                    "date": 1749179582344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,15 +23,16 @@\n         const ADMIN_EMAIL = \"an.ht.62cntt@ntu.edu.vn\";\r\n         const isAdmin = (clerkUser.email_addresses?.[0]?.email_address || \"\") === ADMIN_EMAIL;\r\n \r\n         if (!user) {\r\n-            // Nếu chưa có user, tạo mới\r\n+            // Nếu chưa có user, tạo mới với trường recentSearchedRoomType là mảng rỗng\r\n             user = await User.create({\r\n                 idUser: userId,\r\n                 Ten: (clerkUser.first_name || \"\") + \" \" + (clerkUser.last_name || \"\"),\r\n                 email: clerkUser.email_addresses?.[0]?.email_address || \"\",\r\n                 image: clerkUser.image_url || \"\",\r\n-                role: isAdmin ? \"Admin\" : \"User\"\r\n+                role: isAdmin ? \"Admin\" : \"User\",\r\n+                recentSearchedRoomType: []\r\n             });\r\n             console.log(\"User created in MongoDB:\", user);\r\n         } else {\r\n             // Nếu đã có user, cập nhật role nếu cần\r\n"
                },
                {
                    "date": 1749179710109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n         const ADMIN_EMAIL = \"an.ht.62cntt@ntu.edu.vn\";\r\n         const isAdmin = (clerkUser.email_addresses?.[0]?.email_address || \"\") === ADMIN_EMAIL;\r\n \r\n         if (!user) {\r\n-            // Nếu chưa có user, tạo mới với trường recentSearchedRoomType là mảng rỗng\r\n             user = await User.create({\r\n                 idUser: userId,\r\n                 Ten: (clerkUser.first_name || \"\") + \" \" + (clerkUser.last_name || \"\"),\r\n                 email: clerkUser.email_addresses?.[0]?.email_address || \"\",\r\n"
                }
            ],
            "date": 1749160856113,
            "name": "Commit-0",
            "content": "import User from \"../models/User.js\";\r\n\r\n// Middleware to check if user is authenticated\r\nexport const protect = async (req, res, next) => {\r\n    const { userId } = req.auth;\r\n    if (!userId) {\r\n        return res.json({ success: false, message: \"not authenticated\" });\r\n    } \r\n    const user = await User.findById(userId);\r\n    if (!user) {\r\n        return res.json({ success: false, message: \"user not found\" });\r\n    }\r\n    req.user = user;\r\n    next();\r\n}\r\n"
        }
    ]
}